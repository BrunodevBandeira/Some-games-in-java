package br.com.JogoDaNave;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Fase extends JPanel implements ActionListener {

	private Image fundo;
	private Nave nave; //instancia da classe nave.
	private javax.swing.Timer timer; // serve para tratar(atualizar) a tela sempre que o perssonagem se move.

	private boolean emJogo;

	private List<Inimigo> inimigos;

	private int[][] coordenadas = { { 2380, 29 }, { 2600, 59 }, { 1380, 89 },
			{ 780, 109 }, { 580, 139 }, { 880, 239 }, { 790, 259 },
			{ 760, 50 }, { 790, 150 }, { 1980, 209 }, { 560, 45 }, { 510, 70 },
			{ 930, 159 }, { 590, 80 }, { 530, 60 }, { 940, 59 }, { 990, 30 },
			{ 920, 200 }, { 900, 259 }, { 660, 50 }, { 540, 90 }, { 810, 220 },
			{ 860, 20 }, { 740, 180 }, { 820, 128 }, { 490, 170 }, { 700, 30 },
			{ 920, 300 }, { 856, 328 }, { 456, 320 } };

	public Fase() {

		setFocusable(true);// a tela aparece por causa do SWING,mas ela não esta em foco , portanto chamamos o método seFocusable(),. para deixar a tela como foco principal.
		setDoubleBuffered(true);// é um tratamento de imagem , as vezes fica um chiado na tela de fundo por causa da troca de frame, logo , ele elimina  esse propblema.

		addKeyListener( new TecladoAdapter());// Pega o evento que o método tecladoAdapter pegou.

		ImageIcon referencia = new ImageIcon("res\\fundo02.png");
		fundo = referencia.getImage();
		nave  =  new Nave();

		emJogo = true;
		inicializaInimigos();

		timer = new javax.swing.Timer(5, this);//O 5 é contado em Ms , a cada 5 Ms o this(listener) é chamado.O this é a propria classe Fase.
		timer.start();	// é o método que inicia o Time.
	}

	public void inicializaInimigos() { 

		inimigos = new ArrayList<Inimigo>();
		for(int i = 0; i < coordenadas.length; i++) {
			inimigos.add(new Inimigo(coordenadas[i][0], coordenadas[i][1]));
		}

	}

	public void paint(Graphics g) {

		Graphics2D graficos = (Graphics2D) g; // mostra pro compilador que vai ser impresso , graficos 2D.
		graficos.drawImage(fundo, 0, 0, null);//  Primeiro passamos oq deve ser pintado , nesse caso o fundo.
		// Os zeros são as coordenadas onde esse fundo vai ficar, como vamos preencer a tela toda
		//colocamos os Zeros.
		//como eu não quero tratar uma imagem  eu coloco null, mas poderia chamar qualquer evento 
		//para tratar a imagem.

		if(emJogo) {

			graficos.drawImage(nave.getImagem(), nave.getX(), nave.getY(), this); 
			graficos.drawString("INIMIGOS: " + inimigos.size(), 5, 15);

			List<Missel> misseis =  nave.getMisseis();

			for(int i = 0; i < misseis.size(); i++) {
				Missel m = (Missel)misseis.get(i); 
				graficos.drawImage(m.getImagem(), m.getX(), m.getY(), this);
			}

			for(int i = 0; i < inimigos.size(); i++) {
				Inimigo in =  inimigos.get(i); 
				graficos.drawImage(in.getImagem(), in.getX(), in.getY(), this);
			}


		} else {

			ImageIcon fimJogo = new ImageIcon("res\\game_over.jpg");
			graficos.drawImage(fimJogo.getImage(), 0, 0, null);
		}

		g.dispose();//Limpa a última tela para a proxima pintura.
	}

	public void actionPerformed(ActionEvent e) {

		if(inimigos.size() == 0) {
			emJogo = false;
		}

		List<Missel> misseis = nave.getMisseis();

		for(int i = 0; i < misseis.size(); i++) {

			Missel m = (Missel)misseis.get(i); 

			if(m.isVisivel()){
				m.mexer();
			} else {
				misseis.remove(i);
			}
		} 

		for(int i = 0; i < inimigos.size(); i++) {

			Inimigo in = inimigos.get(i); 

			if(in.isVisivel()){
				in.mexer();
			} else {
				inimigos.remove(i);
			}

		}
		nave.mexer();
		checarColisoes();
		repaint(); // esse método ele repinta a tela toda vez que o jogo meche a cada 5 Ms como determinamos na linha 51.

	}

	public void checarColisoes() {
		// para fazer as colizoes posso instanciar a nave , pois é somente uma , mas para os inimigos não posso fazer o mesmo , pois são varios misseis e vaiors inimigos.
		Rectangle formaNave = nave.getBounds();
		Rectangle formaInimigo;
		Rectangle formaMissel;

		for(int i = 0; i < inimigos.size(); i++) {

			Inimigo tempInimigo =  inimigos.get(i);
			formaInimigo = tempInimigo.getBounds();

			if(formaNave.intersects(formaInimigo)) {
				nave.setVisivel(false);
				tempInimigo.setVisivel(false);
				emJogo = false;
			}
		}

		List<Missel> misseis = nave.getMisseis();

		for(int i = 0; i < misseis.size(); i++) {

			Missel tempMissel = misseis.get(i);
			formaMissel = tempMissel.getBounds();

			for(int j = 0; j < inimigos.size(); j++) {

				Inimigo tempInimigo = inimigos.get(j);
				formaInimigo = tempInimigo.getBounds();

				if(formaMissel.intersects(formaInimigo)) {
					tempInimigo.setVisivel(false);
					tempMissel.setVisivel(false);
				}
			}
		}
	}

	private class TecladoAdapter extends KeyAdapter { //extends KeyAdapter Pega os eventos feitos no teclado.

		public void keyPressed(KeyEvent e) {
			nave.keyPressed(e); //Feito a instancia da nave temos acesso a seus atributos portanto.
		}

		public void keyReleased(KeyEvent e) {
			nave.keyReleased(e);
		}

	}
}
